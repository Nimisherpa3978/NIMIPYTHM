# This is the code in python for a Face Recognition system Project.
# We need to download the following libraries: ("pip install face_recognition" and "pip install opencv-python"); face_recognition also requires 'dlib' and 'cmake'. 
import face_recognition
import cv2
import os

# Load known faces
known_face_encodings = []
known_face_names = []

# Path to known faces
path = "known_faces"
for filename in os.listdir(path):
    if filename.endswith(".jpg") or filename.endswith(".png"):
        image_path = os.path.join(path, filename)
        image = face_recognition.load_image_file(image_path)
        encoding = face_recognition.face_encodings(image)[0]
        known_face_encodings.append(encoding)
        known_face_names.append(os.path.splitext(filename)[0])

# Initialize webcam
video_capture = cv2.VideoCapture(0)

print("üîç Starting face recognition... Press 'q' to quit.")

while True:
    ret, frame = video_capture.read()
    small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
    rgb_frame = small_frame[:, :, ::-1]  # BGR to RGB

    # Find all face locations and encodings in current frame
    face_locations = face_recognition.face_locations(rgb_frame)
    face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)

    # Match faces
    for (top, right, bottom, left), face_encoding in zip(face_locations, face_encodings):
        matches = face_recognition.compare_faces(known_face_encodings, face_encoding)
        name = "Unknown"

        # Use first match (or use face_distance for better results)
        if True in matches:
            first_match_index = matches.index(True)
            name = known_face_names[first_match_index]

        # Scale back up face locations
        top *= 4
        right *= 4
        bottom *= 4
        left *= 4

        # Draw box and label
        cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
        cv2.rectangle(frame, (left, bottom - 25), (right, bottom), (0, 255, 0), cv2.FILLED)
        cv2.putText(frame, name, (left + 6, bottom - 6),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 0), 1)

    cv2.imshow('üé• Face Recognition', frame)

    # Quit on 'q' key
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

video_capture.release()
cv2.destroyAllWindows()
